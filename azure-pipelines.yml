# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  Major: '0'
  Minor: '1'
  Patch: '$(Rev:r)'

steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '3.0.100-preview6-012264' 

- task: DotNetCoreCLI@2
  displayName: Build Guaranteed
  inputs:
    command: build
    projects: 'src/Guaranteed/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

##
## Tests
##
- task: DotNetCoreCLI@2
  displayName: Running Tests
  inputs:
    command: test
    projects: 'tests/*.Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: Code Coverage ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/tests/*.Tests/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-xunit*'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'


# Pack a NuGet package to a test directory
- task: DotNetCoreCLI@2
  displayName: Packing Nuget
  inputs: 
    command: 'pack'
    projects: 'src/Guaranteed/Guaranteed.csproj'
    outputDir: '$(Build.ArtifactStagingDirectory)/Nuget'
    versioningScheme: 'byPrereleaseNumber'
    versionEnvVar: 'nupkgVersion'
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
    packTimezone: 'utc'

# Pack a symbol package along with NuGet package
- task: DotNetCoreCLI@2
  displayName: Packing Symbol Package
  inputs: 
    command: 'pack'
    projects: 'src/Guaranteed/Guaranteed.csproj'
    includesymbols: true


- task: NuGetCommand@2
  displayName: Publish NuGet Package to nuget.org
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Nuget.org'