# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# trigger:
# - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
# Instal DotNetCore SDK
- task: DotNetCoreInstaller@0
  displayName: Installing DotNetCore SDK
  inputs:
    version: '3.0.100-preview6-012264' 

# Install GitVersion
- task: NuGetCommand@2
  displayName: Installing GitVersion
  inputs:
    command: custom
    arguments: install GitVersion.CommandLine -Version 4.0.0 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion
- script: mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch



##
## Build
##
- task: DotNetCoreCLI@2
  displayName: Building
  inputs:
    command: build
    projects: 'src/Guaranteed/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.NuGetVersion)'

#
# Run Tests
#
- task: DotNetCoreCLI@2
  displayName: Running Tests
  inputs:
    command: test
    projects: 'tests/*.Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: Code Coverage ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/tests/*.Tests/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-xunit*'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'


# Pack a NuGet package to a test directory
- task: DotNetCoreCLI@2
  displayName: Packing Nuget
  inputs: 
    command: 'pack'
    arguments: '--no-build'
    projects: 'src/Guaranteed/Guaranteed.csproj'
    outputDir: '$(Build.ArtifactStagingDirectory)/Nuget'
    versioningScheme: 'byBuildNumber'

# Pack a symbol package along with NuGet package
- task: DotNetCoreCLI@2
  displayName: Packing Symbol Package
  inputs: 
    command: 'pack'
    projects: 'src/Guaranteed/Guaranteed.csproj'
    includesymbols: true


# - task: NuGetCommand@2
#   displayName: Publish NuGet Package to nuget.org
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/Nuget/*.nupkg;'
#     nuGetFeedType: 'external'
#     publishFeedCredentials: 'Nuget.org'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['FORCE_PUSH_NUGET']))


# azure-pipelines.yml, continued one more time
- task: KriefMikael.githubtools.GitHubTag.GitHubTag@1
  inputs:
    githubEndpoint: antunesl
    tag: 'v$(GitVersion.NuGetVersion)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['FORCE_PUSH_NUGET']))


# GitHub Release
- task: GitHubRelease@0
  displayName: 'Create GitHub Tag'
  inputs:
    gitHubConnection: '$(GitHubConnection)'
    repositoryName: 'antunesl/Guaranteed'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'manual'
    tag: 'v$(GitVersion.NuGetVersion)'
    isPreRelease: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['FORCE_PUSH_NUGET']))
